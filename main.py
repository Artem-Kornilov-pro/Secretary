import telebot
import sqlite3
import datetime
import google.generativeai as genai
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.interval import IntervalTrigger
from langchain_google_genai import GoogleGenerativeAI
from langchain.chains import LLMChain
from langchain.prompts import PromptTemplate
from langchain.memory import ConversationBufferMemory



memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True)

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
TELEGRAM_BOT_TOKEN = "7799726378:AAHy0ADffhV-XWay0v8xN0Hsag2dJDKSnYA"
GOOGLE_API_KEY = "AIzaSyAKsoeU1KVPNhE9jBWoDJRi0Y7SgF9By_0"

# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telebot –∏ Langchain
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
genai.configure(api_key=GOOGLE_API_KEY)
llm = GoogleGenerativeAI(model="gemini-1.5-pro-latest", google_api_key=GOOGLE_API_KEY)

# üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
conn = sqlite3.connect("tasks.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS tasks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    task TEXT,
    deadline TEXT,
    priority TEXT,
    status TEXT DEFAULT 'pending'
)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS reminders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    task_id INTEGER,
    remind_time TEXT
)''')
conn.commit()



def add_task_from_ai(user_id, parsed_request):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    task_text = parsed_request.get("task", "")
    deadline = parsed_request.get("deadline", "")

    if not task_text or not deadline:
        bot.send_message(user_id, "‚ö† –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏!")
        return

    conn = sqlite3.connect("tasks.db", check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("INSERT INTO tasks (user_id, task, deadline, priority) VALUES (?, ?, ?, ?)",
                   (user_id, task_text, deadline, "—Å—Ä–µ–¥–Ω–∏–π"))
    conn.commit()
    cursor.close()
    
    bot.send_message(user_id, f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task_text} (–¥–æ {deadline})")


def edit_task_from_ai(user_id, parsed_request):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É."""
    task_id = parsed_request.get("task_id")
    new_text = parsed_request.get("task")

    if not task_id or not new_text:
        bot.send_message(user_id, "‚ö† –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç!")
        return

    conn = sqlite3.connect("tasks.db", check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("UPDATE tasks SET task = ? WHERE id = ? AND user_id = ?", (new_text, task_id, user_id))
    conn.commit()
    cursor.close()

    bot.send_message(user_id, f"‚úè –ó–∞–¥–∞—á–∞ {task_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {new_text}")


def delete_task_from_ai(user_id, parsed_request):
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É –ø–æ ID."""
    task_id = parsed_request.get("task_id")

    if not task_id:
        bot.send_message(user_id, "‚ö† –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
        return

    conn = sqlite3.connect("tasks.db", check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM tasks WHERE id = ? AND user_id = ?", (task_id, user_id))
    conn.commit()
    cursor.close()

    bot.send_message(user_id, f"üóë –ó–∞–¥–∞—á–∞ {task_id} —É–¥–∞–ª–µ–Ω–∞!")



def list_tasks_from_ai(user_id):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á."""
    conn = sqlite3.connect("tasks.db", check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("SELECT id, task, deadline, priority FROM tasks WHERE user_id = ? AND status != 'completed'", (user_id,))
    tasks = cursor.fetchall()
    cursor.close()

    if tasks:
        response = "üìå –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n"
        for task in tasks:
            response += f"üìù {task[1]} | ‚è≥ {task[2]} | üî• {task[3]} (ID: {task[0]})\n"
        bot.send_message(user_id, response)
    else:
        bot.send_message(user_id, "üîπ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")


from langchain.output_parsers import StructuredOutputParser, ResponseSchema

# –û–ø–∏—Å—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
response_schemas = [
    ResponseSchema(name="action", description="–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞: add, edit, delete, list, –∏–ª–∏ none"),
    ResponseSchema(name="task", description="–¢–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è"),
    ResponseSchema(name="deadline", description="–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–µ–¥–ª–∞–π–Ω–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)"),
    ResponseSchema(name="task_id", description="ID –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –∏–ª–∏ —É–¥–∞–ª—è–µ—Ç—Å—è (–µ—Å–ª–∏ –µ—Å—Ç—å)"),
]

parser = StructuredOutputParser.from_response_schemas(response_schemas)

def parse_user_request(user_input):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —á—Ç–æ —Ö–æ—á–µ—Ç —Å–¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (—Å–æ–∑–¥–∞—Ç—å, –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É)."""
    prompt = PromptTemplate.from_template(
        "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∑–∞–¥–∞—á–∞–º–∏. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–∫–∞–∂–∏ –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.\n"
        "–°–æ–æ–±—â–µ–Ω–∏–µ: {user_input}\n"
        "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ JSON: {format_instructions}"
    ).partial(format_instructions=parser.get_format_instructions())

    structured_chain = prompt | llm | parser
    result = structured_chain.invoke({"user_input": user_input})
    
    return result  # –í–µ—Ä–Ω—ë—Ç —Å–ª–æ–≤–∞—Ä—å —Å action, task, deadline, task_id


# üìå –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@bot.message_handler(commands=["add_task"])
def add_task(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ó–∞–¥–∞—á–∞ | –î–∞—Ç–∞ (YYYY-MM-DD HH:MM) | –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–Ω–∏–∑–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–≤—ã—Å–æ–∫–∏–π)")
    bot.register_next_step_handler(message, save_task)


def save_task(message):
    try:
        user_id = message.chat.id
        parts = message.text.split("|")
        task_text = parts[0].strip()
        deadline = parts[1].strip()
        priority = parts[2].strip()

        cursor.execute("INSERT INTO tasks (user_id, task, deadline, priority) VALUES (?, ?, ?, ?)", 
                       (user_id, task_text, deadline, priority))
        conn.commit()

        bot.send_message(user_id, "‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 30 –º–∏–Ω—É—Ç
        remind_time = (datetime.datetime.strptime(deadline, "%Y-%m-%d %H:%M") - datetime.timedelta(minutes=30)).strftime("%Y-%m-%d %H:%M")
        cursor.execute("INSERT INTO reminders (user_id, task_id, remind_time) VALUES (?, (SELECT id FROM tasks WHERE task = ?), ?)",
                       (user_id, task_text, remind_time))
        conn.commit()

    except Exception as e:
        bot.send_message(message.chat.id, "‚ö† –û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")


# üìå –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á (–∏—Å–∫–ª—é—á–∞–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ)
@bot.message_handler(commands=["list_tasks"])
def list_tasks(message):
    user_id = message.chat.id
    cursor.execute("SELECT id, task, deadline, priority FROM tasks WHERE user_id = ? AND status != 'completed'", (user_id,))
    tasks = cursor.fetchall()

    if tasks:
        response = "üìå –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n"
        for task in tasks:
            response += f"üìù {task[1]} | ‚è≥ {task[2]} | üî• {task[3]}\n"
        bot.send_message(user_id, response)
    else:
        bot.send_message(user_id, "üîπ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")


# üìå –§—É–Ω–∫—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def send_reminders():
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
    cursor.execute("SELECT user_id, task_id FROM reminders WHERE remind_time = ?", (now,))
    reminders = cursor.fetchall()

    for reminder in reminders:
        cursor.execute("SELECT task FROM tasks WHERE id = ?", (reminder[1],))
        task_text = cursor.fetchone()[0]
        bot.send_message(reminder[0], f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –ß–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç: {task_text}")

    # –£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    cursor.execute("DELETE FROM reminders WHERE remind_time = ?", (now,))
    conn.commit()


#scheduler.add_job(send_reminders, IntervalTrigger(minutes=1))   !!!



# üìå –§—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ (–¢–µ–ø–µ—Ä—å –æ–Ω –≤–∏–¥–∏—Ç –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!)
# üìå –§—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ (–¢–µ–ø–µ—Ä—å –æ–Ω —É—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã!)
@bot.message_handler(commands=["assistant"])
def assistant_handler(message):
    bot.send_message(message.chat.id, "üß† –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
    bot.register_next_step_handler(message, process_ai_request)


def process_ai_request(message):
    user_id = message.chat.id
    user_input = message.text

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ —Ö–æ—á–µ—Ç —Å–¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–∑–∞–¥–∞—á–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç)
    parsed_request = parse_user_request(user_input)
    action = parsed_request.get("action", "none")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∑–∞–¥–∞—á–∞–º–∏
    if action == "add":
        add_task_from_ai(user_id, parsed_request)
    elif action == "edit":
        edit_task_from_ai(user_id, parsed_request)
    elif action == "delete":
        delete_task_from_ai(user_id, parsed_request)
    elif action == "list":
        list_tasks_from_ai(user_id)
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–ø—Ä–æ—Å, –æ—Ç–≤–µ—á–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π AI
        chat_history = memory.load_memory_variables({}).get("chat_history", "")

        template = PromptTemplate.from_template(
            "–¢—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: {question}.\n\n"
            "–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:\n"
            "{chat_history}\n\n"
            "–û—Ç–≤–µ—Ç—å –ø–æ–ª–µ–∑–Ω–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ."
        )

        chain = template | llm

        response = chain.invoke({
            "question": user_input,
            "chat_history": chat_history  # –ü–µ—Ä–µ–¥–∞—ë–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        })

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –≤ –ø–∞–º—è—Ç—å
        memory.save_context({"question": user_input}, {"response": response})

        bot.send_message(user_id, response)



# üìå –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@bot.message_handler(commands=["complete_task"])
def complete_task(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏:")
    bot.register_next_step_handler(message, mark_task_completed)


def mark_task_completed(message):
    try:
        task_id = int(message.text)
        cursor.execute("UPDATE tasks SET status = 'completed' WHERE id = ?", (task_id,))
        conn.commit()
        bot.send_message(message.chat.id, "‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    except:
        bot.send_message(message.chat.id, "‚ö† –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID.")


# üìå –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(commands=["start"])
def start_message(message):
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.\n\n"
                                      "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                                      "/add_task - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
                                      "/list_tasks - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏\n"
                                      "/complete_task - –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É\n"
                                      "/assistant - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI\n")


@bot.message_handler(func=lambda message: message.text and not message.text.startswith("/"))
def handle_general_messages(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥, —á–µ—Ä–µ–∑ –ò–ò"""
    process_ai_request(message)




if __name__ == "__main__":
    scheduler = BackgroundScheduler()
    scheduler.start()
    scheduler.add_job(send_reminders, IntervalTrigger(minutes=1))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
